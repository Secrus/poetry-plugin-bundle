[tool.poetry]
name = "poetry-plugin-bundle"
version = "1.2.0"
description = "Poetry plugin to bundle projects into various formats"
authors = ["SÃ©bastien Eustace <sebastien@eustace.io>"]
license = "MIT"
readme = "README.md"

packages = [
    { include = "poetry_plugin_bundle", from = "src" }
]

include = [
    { path = "tests", format = "sdist" }
]

[tool.poetry.dependencies]
python = "^3.7"
poetry = "^1.4.0"

[tool.poetry.group.dev.dependencies]
pre-commit = ">=2.6"
pytest = ">=7.1.2"
pytest-mock = ">=3.6.1"
mypy = ">=1.1.1"

# only used in github actions
[tool.poetry.group.github-actions]
optional = true
[tool.poetry.group.github-actions.dependencies]
pytest-github-actions-annotate-failures = "^0.1.7"

[tool.poetry.plugins."poetry.application.plugin"]
export = "poetry_plugin_bundle.plugin:BundleApplicationPlugin"


[tool.ruff]
fix = true
unfixable = [
    "ERA",  # do not autoremove commented out code
]
target-version = "py37"
line-length = 88
extend-select = [
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "ERA",  # flake8-eradicate/eradicate
    "PIE",  # flake8-pie
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "N",  # pep8-naming
    "RUF",  # ruff checks
]
ignore = [
    "B904",  # use 'raise ... from err'
    "B905",  # use explicit 'strict=' parameter with 'zip()'
    "N818"  #  Exception name should be named with an Error suffix
]
extend-exclude = [
    # External to the project's coding standards
    "tests/**/fixtures/*",
]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"


[tool.black]
target-version = ['py37']
preview = true

[tool.isort]
py_version = 37
profile = "black"
force_single_line = true
combine_as_imports = true
lines_between_types = 1
lines_after_imports = 2

[tool.mypy]
enable_error_code = [
    "ignore-without-code",
    "redundant-expr",
    "truthy-bool",
]
explicit_package_bases = true
files = ["src", "tests"]
mypy_path = "src"
namespace_packages = true
show_error_codes = true
strict = true

[[tool.mypy.overrides]]
module = [
  'cleo.*',
]
ignore_missing_imports = true


[tool.pytest.ini_options]
testpaths = [
    "tests"
]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
